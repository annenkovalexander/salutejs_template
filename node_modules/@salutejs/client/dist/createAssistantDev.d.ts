import { AssistantSettings, AssistantSmartAppData, Surface } from './typings';
import { InitializeAssistantSDKParams } from './dev';
import { CreateAssistantParams } from './createAssistant';
export declare type Channel = 'B2C' | 'COMPANION_B2C' | 'SBOL';
export declare type CreateAssistantDevParams = CreateAssistantParams & {
    surface?: Surface | string;
    userChannel?: Channel | string;
} & Pick<InitializeAssistantSDKParams, 'initPhrase' | 'url' | 'userId' | 'token' | 'surfaceVersion' | 'nativePanel' | 'sdkVersion' | 'enableRecord' | 'recordParams' | 'fakeVps' | 'settings' | 'getMeta' | 'features'>;
export declare const createAssistantDev: <A extends AssistantSmartAppData<any>>({ getState, getRecoveryState, ready, surface, userChannel, ...sdkParams }: CreateAssistantDevParams) => {
    nativePanel: {
        hide: () => void;
        show: () => void;
    };
    cancelTts: (() => void) | undefined;
    close: () => void;
    getInitialData: () => import("./typings").AssistantClientCustomizedCommand<import("./typings").AssistantSmartAppCommand<string, any>>[];
    findInInitialData: <T>({ type, command }: {
        type?: string | undefined;
        command?: string | undefined;
    }) => T | undefined;
    getRecoveryState: () => unknown;
    on: <K extends "start" | "command" | "error" | "data" | "tts">(event: K, cb: import("./createAssistant").AssistantEvents<A>[K]) => () => void;
    subscribeToCommand: <K_1 extends "theme" | "character" | "insets" | "dynamic_insets" | "minimum_static_insets" | "maximum_static_insets" | "navigation" | "smart_app_data" | "smart_app_error" | "app_context" | "visibility" | "tts_state_update">(event: K_1, cb: import("./createAssistant").AssistantClientCommandEvents<import("./typings").AssistantClientCustomizedCommand<import("./typings").AssistantSmartAppCommand<string, any>>>[K_1]) => () => void;
    sendAction: <D extends {
        type: string;
        payload?: any;
    } = {
        type: string;
        payload?: any;
    }, E extends {
        code: number;
        description: string;
    } = {
        code: number;
        description: string;
    }>(action: {
        type: string;
        payload?: any;
    }, onData?: import("./nanoobservable").ObserverFunc<D> | undefined, onError?: import("./nanoobservable").ObserverFunc<E> | undefined, { name, requestId }?: Pick<import("./createAssistant").SendDataParams, "name" | "requestId">) => () => void;
    sendData: ({ action, name, requestId }: import("./createAssistant").SendDataParams, onData?: import("./nanoobservable").ObserverFunc<import("./typings").AssistantSmartAppError | A> | undefined) => () => void;
    setGetState: (nextGetState: () => {}) => void;
    setGetRecoveryState: (nextGetRecoveryState?: (() => unknown) | undefined) => void;
    setSuggests: (suggestions: import("@salutejs/scenario").Button[]) => void;
    setHints: (hints: import("@salutejs/scenario/dist/lib/types/systemMessage").Hints) => void;
    sendText: (message: string) => void;
    setHeaderButtons: (headerButtons: {
        [k: string]: unknown;
        icon_address: import("@salutejs/scenario").ImageAddress;
        actions?: import("@salutejs/scenario").Actions | undefined;
        log_id?: string | undefined;
        icon_badge?: "enabled" | "disabled" | undefined;
    }[] | undefined) => void;
    ready: () => void;
};
export declare const createSmartappDebugger: <A extends AssistantSmartAppData<any>>({ token, getState, getRecoveryState, ready, settings, nativePanel, ...sdkParams }: {
    token: string;
    settings?: Pick<AssistantSettings, "dubbing"> | undefined;
} & CreateAssistantParams & Pick<CreateAssistantDevParams, "userChannel" | "surface" | "getMeta" | "initPhrase" | "nativePanel" | "enableRecord" | "recordParams">) => {
    nativePanel: {
        hide: () => void;
        show: () => void;
    };
    cancelTts: (() => void) | undefined;
    close: () => void;
    getInitialData: () => import("./typings").AssistantClientCustomizedCommand<import("./typings").AssistantSmartAppCommand<string, any>>[];
    findInInitialData: <T>({ type, command }: {
        type?: string | undefined;
        command?: string | undefined;
    }) => T | undefined;
    getRecoveryState: () => unknown;
    on: <K extends "start" | "command" | "error" | "data" | "tts">(event: K, cb: import("./createAssistant").AssistantEvents<A>[K]) => () => void;
    subscribeToCommand: <K_1 extends "theme" | "character" | "insets" | "dynamic_insets" | "minimum_static_insets" | "maximum_static_insets" | "navigation" | "smart_app_data" | "smart_app_error" | "app_context" | "visibility" | "tts_state_update">(event: K_1, cb: import("./createAssistant").AssistantClientCommandEvents<import("./typings").AssistantClientCustomizedCommand<import("./typings").AssistantSmartAppCommand<string, any>>>[K_1]) => () => void;
    sendAction: <D extends {
        type: string;
        payload?: any;
    } = {
        type: string;
        payload?: any;
    }, E extends {
        code: number;
        description: string;
    } = {
        code: number;
        description: string;
    }>(action: {
        type: string;
        payload?: any;
    }, onData?: import("./nanoobservable").ObserverFunc<D> | undefined, onError?: import("./nanoobservable").ObserverFunc<E> | undefined, { name, requestId }?: Pick<import("./createAssistant").SendDataParams, "name" | "requestId">) => () => void;
    sendData: ({ action, name, requestId }: import("./createAssistant").SendDataParams, onData?: import("./nanoobservable").ObserverFunc<import("./typings").AssistantSmartAppError | A> | undefined) => () => void;
    setGetState: (nextGetState: () => {}) => void;
    setGetRecoveryState: (nextGetRecoveryState?: (() => unknown) | undefined) => void;
    setSuggests: (suggestions: import("@salutejs/scenario").Button[]) => void;
    setHints: (hints: import("@salutejs/scenario/dist/lib/types/systemMessage").Hints) => void;
    sendText: (message: string) => void;
    setHeaderButtons: (headerButtons: {
        [k: string]: unknown;
        icon_address: import("@salutejs/scenario").ImageAddress;
        actions?: import("@salutejs/scenario").Actions | undefined;
        log_id?: string | undefined;
        icon_badge?: "enabled" | "disabled" | undefined;
    }[] | undefined) => void;
    ready: () => void;
};
export { createRecordOfflinePlayer as createRecordPlayer } from './record/offline-player';
export { createOnlineRecordPlayer } from './record/online-player';
export { NativePanelParams } from './NativePanel/NativePanel';
export * from './dev';
export * from './record/mock-recorder';
export * from './record/createMockWsCreator';
export { createAssistantHostMock, createAssistantHostMockWithRecord, AssistantActionResult, CommandParams, } from './mock';
//# sourceMappingURL=createAssistantDev.d.ts.map