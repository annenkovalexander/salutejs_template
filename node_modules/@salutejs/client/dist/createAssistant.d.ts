import { AssistantAppState, AssistantServerAction, AssistantClientCustomizedCommand, AssistantSmartAppData, AssistantClientCommand, AssistantSmartAppError, AssistantSmartAppCommand, Hints, Suggestions, AssistantTtsStateUpdate, SystemMessageHeaderByttonsType } from './typings';
import { ObserverFunc } from './nanoobservable';
export interface CreateAssistantParams {
    getState: () => AssistantAppState;
    getRecoveryState?: () => unknown;
    ready?: boolean;
}
export interface AssistantEvents<A extends AssistantSmartAppData> {
    start: () => void;
    data: (command: AssistantClientCustomizedCommand<A>) => void;
    command: <T extends AssistantSmartAppCommand['smart_app_data'] = AssistantSmartAppCommand['smart_app_data']>(data: T) => void;
    error: <T extends AssistantSmartAppError['smart_app_error'] = AssistantSmartAppError['smart_app_error']>(error: T) => void;
    tts: (state: Pick<AssistantTtsStateUpdate, 'state' | 'owner'>) => void;
}
export interface SendDataParams {
    action: AssistantServerAction;
    name?: string;
    requestId?: string;
}
export declare type AssistantClientCommandEvents<C extends AssistantClientCommand = AssistantClientCommand> = {
    [event in C['type']]: (command: C) => void;
};
export declare const createAssistant: <A extends AssistantSmartAppData<any>>({ getState, getRecoveryState, ready, }: CreateAssistantParams) => {
    cancelTts: (() => void) | undefined;
    close: () => void;
    getInitialData: () => AssistantClientCustomizedCommand<AssistantSmartAppCommand<string, any>>[];
    findInInitialData: <T>({ type, command }: {
        type?: string | undefined;
        command?: string | undefined;
    }) => T | undefined;
    getRecoveryState: () => unknown;
    on: <K extends "start" | "command" | "error" | "data" | "tts">(event: K, cb: AssistantEvents<A>[K]) => () => void;
    subscribeToCommand: <K_1 extends "theme" | "character" | "insets" | "dynamic_insets" | "minimum_static_insets" | "maximum_static_insets" | "navigation" | "smart_app_data" | "smart_app_error" | "app_context" | "visibility" | "tts_state_update">(event: K_1, cb: AssistantClientCommandEvents<AssistantClientCustomizedCommand<AssistantSmartAppCommand<string, any>>>[K_1]) => () => void;
    sendAction: <D extends {
        type: string;
        payload?: any;
    } = {
        type: string;
        payload?: any;
    }, E extends {
        code: number;
        description: string;
    } = {
        code: number;
        description: string;
    }>(action: {
        type: string;
        payload?: any;
    }, onData?: ObserverFunc<D> | undefined, onError?: ObserverFunc<E> | undefined, { name, requestId }?: Pick<SendDataParams, 'name' | 'requestId'>) => () => void;
    sendData: ({ action, name, requestId }: SendDataParams, onData?: ObserverFunc<AssistantSmartAppError | A> | undefined) => (() => void);
    setGetState: (nextGetState: () => {}) => void;
    setGetRecoveryState: (nextGetRecoveryState?: (() => unknown) | undefined) => void;
    setSuggests: (suggestions: Suggestions['buttons']) => void;
    setHints: (hints: Hints) => void;
    sendText: (message: string) => void;
    setHeaderButtons: (headerButtons: SystemMessageHeaderByttonsType) => void;
    ready: () => void;
};
export * from './typings';
//# sourceMappingURL=createAssistant.d.ts.map