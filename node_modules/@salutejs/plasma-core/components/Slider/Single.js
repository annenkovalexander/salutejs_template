"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Slider = void 0;

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _SliderBase = /*#__PURE__*/require("./SliderBase");

var _Handle = /*#__PURE__*/require("./Handle");

var _excluded = ["min", "max", "value", "disabled", "onChangeCommitted", "onChange", "ariaLabel", "multipleStepSize", "thumb"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Slider = function Slider(_ref) {
  var min = _ref.min,
      max = _ref.max,
      value = _ref.value,
      disabled = _ref.disabled,
      onChangeCommitted = _ref.onChangeCommitted,
      onChange = _ref.onChange,
      ariaLabel = _ref.ariaLabel,
      _ref$multipleStepSize = _ref.multipleStepSize,
      multipleStepSize = _ref$multipleStepSize === void 0 ? 10 : _ref$multipleStepSize,
      thumb = _ref.thumb,
      rest = _objectWithoutProperties(_ref, _excluded);

  var _React$useState = _react["default"].useState({
    xHandle: 0,
    stepSize: 0,
    railFillWidth: 0
  }),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      state = _React$useState2[0],
      setState = _React$useState2[1];

  var stepSize = state.stepSize;

  _react["default"].useEffect(function () {
    var localValue = Math.min(Math.max(value, min), max) - min;
    setState(function (prevState) {
      return _objectSpread(_objectSpread({}, prevState), {}, {
        xHandle: stepSize * localValue,
        railFillWidth: stepSize * localValue
      });
    });
  }, [value, stepSize, min, max]);

  var setStepSize = _react["default"].useCallback(function (newStepSize) {
    setState(function (prevState) {
      return _objectSpread(_objectSpread({}, prevState), {}, {
        stepSize: newStepSize
      });
    });
  }, []);

  var onHandleChange = _react["default"].useCallback(function (handleValue, data) {
    var newHandleXPosition = data.x;
    setState(function (prevState) {
      return _objectSpread(_objectSpread({}, prevState), {}, {
        railFillWidth: newHandleXPosition
      });
    });

    if (onChange) {
      onChange(handleValue);
    }
  }, [onChange]);

  var onHandleChangeCommitted = _react["default"].useCallback(function (handleValue, data) {
    onChangeCommitted(handleValue);
    setState(function (prevState) {
      return _objectSpread(_objectSpread({}, prevState), {}, {
        xHandle: data.lastX,
        railFillWidth: data.lastX
      });
    });
  }, [onChangeCommitted]);

  return /*#__PURE__*/_react["default"].createElement(_SliderBase.SliderBase, _extends({
    min: min,
    max: max,
    disabled: disabled,
    setStepSize: setStepSize,
    onChange: onHandleChangeCommitted,
    railFillWidth: state.railFillWidth
  }, rest), /*#__PURE__*/_react["default"].createElement(_Handle.Handle, {
    stepSize: state.stepSize,
    onChangeCommitted: onHandleChangeCommitted,
    onChange: onHandleChange,
    xPosition: state.xHandle,
    min: min,
    max: max,
    value: value,
    disabled: disabled,
    ariaLabel: ariaLabel,
    multipleStepSize: multipleStepSize,
    thumb: thumb
  }));
};

exports.Slider = Slider;