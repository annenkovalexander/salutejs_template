"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Handle = void 0;

var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));

var _styledComponents = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("styled-components"));

var _reactDraggable = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react-draggable"));

var _utils = /*#__PURE__*/require("./utils");

var _ThumbBase = /*#__PURE__*/require("./ThumbBase");

var _excluded = ["stepSize", "onChangeCommitted", "onChange", "xPosition", "min", "max", "bounds", "zIndex", "disabled", "side"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var HandleStyled = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma__sc-e25rt8-0"
})(["cursor:pointer;position:absolute;z-index:1;top:0;left:0;"]);

var Handle = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var stepSize = _ref.stepSize,
      onChangeCommitted = _ref.onChangeCommitted,
      onChange = _ref.onChange,
      xPosition = _ref.xPosition,
      min = _ref.min,
      max = _ref.max,
      _ref$bounds = _ref.bounds,
      bounds = _ref$bounds === void 0 ? [] : _ref$bounds,
      zIndex = _ref.zIndex,
      disabled = _ref.disabled,
      side = _ref.side,
      rest = _objectWithoutProperties(_ref, _excluded);

  var lastOnChangeValue = (0, _react.useRef)();
  var currentSliderValue = (lastOnChangeValue === null || lastOnChangeValue === void 0 ? void 0 : lastOnChangeValue.current) || rest.value;
  var onDrag = (0, _react.useCallback)(function (_, data) {
    if (onChange) {
      var newValue = (0, _utils.getSliderThumbValue)(data.x, stepSize, min, max);

      if (lastOnChangeValue.current !== newValue) {
        onChange(newValue, data);
        lastOnChangeValue.current = newValue;
      }
    }
  }, [onChange, stepSize, min, max]);
  var onStop = (0, _react.useCallback)(function (_, data) {
    var newValue = (0, _utils.getSliderThumbValue)(data.x, stepSize, min, max);
    onChangeCommitted(newValue, data);
  }, [onChangeCommitted, stepSize, min, max]);

  var _getOffsets = (0, _utils.getOffsets)(ref, side),
      _getOffsets2 = _slicedToArray(_getOffsets, 2),
      offsetLeft = _getOffsets2[0],
      offsetRight = _getOffsets2[1];

  var _bounds = _slicedToArray(bounds, 2),
      leftValueBound = _bounds[0],
      rightValueBound = _bounds[1];

  var leftPositionBound = leftValueBound ? (leftValueBound - min) * stepSize : null;
  var rightPositionBound = rightValueBound ? (rightValueBound - min) * stepSize : null;
  var position = typeof xPosition === 'number' ? {
    x: xPosition,
    y: 0
  } : undefined;
  var tabIndex = disabled ? -1 : 0;
  var computedBounds = {
    left: (leftPositionBound !== null && leftPositionBound !== void 0 ? leftPositionBound : 0) + offsetLeft,
    right: (rightPositionBound !== null && rightPositionBound !== void 0 ? rightPositionBound : stepSize * (max - min)) - offsetRight
  };
  return /*#__PURE__*/_react["default"].createElement(_reactDraggable["default"], {
    axis: "x",
    bounds: computedBounds,
    grid: [stepSize, 1],
    onStop: onStop,
    onDrag: onDrag,
    position: position,
    disabled: disabled
  }, /*#__PURE__*/_react["default"].createElement(HandleStyled, {
    ref: ref,
    style: {
      zIndex: zIndex
    }
  }, /*#__PURE__*/_react["default"].createElement(_ThumbBase.Thumb, _extends({
    tabIndex: tabIndex,
    min: min,
    max: max,
    value: currentSliderValue,
    stepSize: stepSize,
    onChangeCommitted: onChangeCommitted,
    xPosition: xPosition,
    disabled: disabled,
    bounds: computedBounds
  }, rest))));
});
exports.Handle = Handle;