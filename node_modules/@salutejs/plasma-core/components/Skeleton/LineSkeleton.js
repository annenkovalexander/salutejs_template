"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LineSkeleton = void 0;

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _styledComponents = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("styled-components"));

var _mixins = /*#__PURE__*/require("../../mixins");

var typography = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("../../tokens/typography"));

var _Skeleton = /*#__PURE__*/require("./Skeleton");

var _collectPackageInfo = /*#__PURE__*/require("../../collectPackageInfo");

var _StyledVisibleLine;

var _excluded = ["size", "roundness"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

(0, _collectPackageInfo.collectPackageInfo)('Skeleton/LineSkeleton');

var StyledVisibleLine = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma__sc-7e0z6x-0"
})(["position:relative;overflow:hidden;width:100%;"]);

var StyledLine = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma__sc-7e0z6x-1"
})(["display:flex;align-items:center;width:100%;", " & ", "{", " ", "}"], function (_ref) {
  var $size = _ref.$size;
  return (0, _styledComponents.css)(["height:", ";& ", "{height:", ";}"], typography[$size].lineHeight, StyledVisibleLine, typography[$size].fontSize);
}, StyledVisibleLine, _mixins.applyRoundness, _mixins.applySkeletonGradient);

/**
 * Размеры компонента задаются с помощью констант и соответствуют размерам [типографических элементов](/?path=/docs/).
 */
var LineSkeleton = function LineSkeleton(_ref2) {
  var _ref2$size = _ref2.size,
      size = _ref2$size === void 0 ? _Skeleton.DEFAULT_TEXT_SIZE : _ref2$size,
      _ref2$roundness = _ref2.roundness,
      roundness = _ref2$roundness === void 0 ? _Skeleton.DEFAULT_ROUNDNESS : _ref2$roundness,
      rest = _objectWithoutProperties(_ref2, _excluded);

  return /*#__PURE__*/_react["default"].createElement(StyledLine, _extends({
    $size: size,
    roundness: roundness
  }, rest), _StyledVisibleLine || (_StyledVisibleLine = /*#__PURE__*/_react["default"].createElement(StyledVisibleLine, null)));
};

exports.LineSkeleton = LineSkeleton;