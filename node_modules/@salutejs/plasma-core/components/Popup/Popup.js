"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Popup = exports.getPlacement = void 0;

var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));

var _styledComponents = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("styled-components"));

var _reactPopper = /*#__PURE__*/require("react-popper");

var _hooks = /*#__PURE__*/require("../../hooks");

var _collectPackageInfo = /*#__PURE__*/require("../../collectPackageInfo");

var _excluded = ["disclosure", "children", "isOpen", "trigger", "placement", "onToggle"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

(0, _collectPackageInfo.collectPackageInfo)('Popup/Popup');

var StyledRoot = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma__sc-w3yec9-0"
})(["position:relative;box-sizing:border-box;display:inline-flex;"]);

var StyledPopup = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma__sc-w3yec9-1"
})(["position:absolute;z-index:1;padding:var(--plasma-popup-padding);margin:var(--plasma-popup-margin);width:var(--plasma-popup-width);"]);

var getPlacement = function getPlacement(placement) {
  return "".concat(placement, "-start");
};

exports.getPlacement = getPlacement;

var getAutoPlacements = function getAutoPlacements(placements) {
  return (placements || []).map(function (placement) {
    return getPlacement(placement);
  });
};
/**
 * Всплывающее окно с возможностью позиционирования
 * и вызова по клику либо ховеру.
 */


var Popup = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/_react["default"].forwardRef(function (_ref, outerRootRef) {
  var disclosure = _ref.disclosure,
      children = _ref.children,
      isOpen = _ref.isOpen,
      trigger = _ref.trigger,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'auto' : _ref$placement,
      onToggle = _ref.onToggle,
      rest = _objectWithoutProperties(_ref, _excluded);

  var rootRef = (0, _react.useRef)(null);
  var popupRef = (0, _react.useRef)(null);
  var handleRef = (0, _hooks.useForkRef)(rootRef, outerRootRef);
  var isAutoArray = Array.isArray(placement);
  var isAuto = isAutoArray || placement === 'auto';

  var _usePopper = (0, _reactPopper.usePopper)(rootRef.current, popupRef.current, {
    placement: getPlacement(isAutoArray ? 'auto' : placement),
    modifiers: [{
      name: 'flip',
      enabled: isAuto,
      options: {
        allowedAutoPlacements: getAutoPlacements(isAutoArray ? placement : [])
      }
    }]
  }),
      styles = _usePopper.styles,
      attributes = _usePopper.attributes,
      forceUpdate = _usePopper.forceUpdate;

  var onDocumentClick = (0, _react.useCallback)(function (event) {
    var _rootRef$current;

    var targetIsRoot = event.target === rootRef.current;
    var rootHasTarget = (_rootRef$current = rootRef.current) === null || _rootRef$current === void 0 ? void 0 : _rootRef$current.contains(event.target);

    if (!targetIsRoot && !rootHasTarget) {
      onToggle === null || onToggle === void 0 ? void 0 : onToggle(false, event);
    }
  }, [onToggle]);
  var onClick = (0, _react.useCallback)(function (event) {
    if (trigger === 'click') {
      var _popupRef$current;

      var targetIsPopup = event.target === popupRef.current;
      var rootHasTarget = (_popupRef$current = popupRef.current) === null || _popupRef$current === void 0 ? void 0 : _popupRef$current.contains(event.target);

      if (!targetIsPopup && !rootHasTarget) {
        onToggle === null || onToggle === void 0 ? void 0 : onToggle(!isOpen, event);
      }
    }
  }, [trigger, isOpen, onToggle]);
  var onMouseEnter = (0, _react.useCallback)(function (event) {
    if (trigger === 'hover') {
      onToggle === null || onToggle === void 0 ? void 0 : onToggle(true, event);
    }
  }, [trigger, onToggle]);
  var onMouseLeave = (0, _react.useCallback)(function (event) {
    if (trigger === 'hover') {
      onToggle === null || onToggle === void 0 ? void 0 : onToggle(false, event);
    }
  }, [trigger, onToggle]);
  var onFocus = (0, _react.useCallback)(function (event) {
    if (trigger === 'hover') {
      onToggle === null || onToggle === void 0 ? void 0 : onToggle(true, event);
    }
  }, [trigger, onToggle]);
  var onBlur = (0, _react.useCallback)(function (event) {
    if (trigger === 'hover') {
      onToggle === null || onToggle === void 0 ? void 0 : onToggle(false, event);
    }
  }, [trigger, onToggle]);
  (0, _react.useEffect)(function () {
    document.addEventListener('click', onDocumentClick);
    return function () {
      return document.removeEventListener('click', onDocumentClick);
    };
  }, []);
  (0, _react.useEffect)(function () {
    if (!isOpen || !forceUpdate) {
      return;
    }

    forceUpdate();
  }, [isOpen]);
  return /*#__PURE__*/_react["default"].createElement(StyledRoot, _extends({
    ref: handleRef,
    onClick: onClick,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onFocus: onFocus,
    onBlur: onBlur
  }, rest), disclosure, children && /*#__PURE__*/_react["default"].createElement(StyledPopup, _extends({}, attributes.popper, {
    ref: popupRef,
    style: _objectSpread(_objectSpread({}, styles.popper), {
      display: isOpen ? 'block' : 'none'
    })
  }), children));
}));
exports.Popup = Popup;