"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Spinner = void 0;

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _styledComponents = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("styled-components"));

var _tokens = /*#__PURE__*/require("../../tokens");

var _hooks = /*#__PURE__*/require("../../hooks");

var _SpinnerSvg = /*#__PURE__*/require("./SpinnerSvg");

var _collectPackageInfo = /*#__PURE__*/require("../../collectPackageInfo");

var _excluded = ["id", "size", "color", "deviceScale"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

(0, _collectPackageInfo.collectPackageInfo)('Spinner/Spinner');
var rotateAnimation = /*#__PURE__*/(0, _styledComponents.keyframes)(["from{transform:rotate(0);}to{transform:rotate(360deg);}"]);

var StyledRoot = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma__sc-3zbofp-0"
})(["display:flex;box-sizing:border-box;", " animation:", " 1s linear infinite;"], function (_ref) {
  var $size = _ref.$size;
  return (0, _styledComponents.css)(["width:", ";height:", ";"], $size, $size);
}, rotateAnimation);

var scalingPixelBasis = 16;

var sizeFormatting = function sizeFormatting(size) {
  var deviceScale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

  if (typeof size === 'number' || !size.endsWith('rem') && !size.endsWith('px')) {
    return "".concat(Number(size) / (scalingPixelBasis * deviceScale), "rem");
  }

  return size;
};
/**
 * Компонент для отображения индикатора загрузки.
 */


var Spinner = function Spinner(props) {
  var id = props.id,
      _props$size = props.size,
      size = _props$size === void 0 ? 56 : _props$size,
      _props$color = props.color,
      color = _props$color === void 0 ? _tokens.accent : _props$color,
      deviceScale = props.deviceScale,
      rest = _objectWithoutProperties(props, _excluded);

  var uniqId = (0, _hooks.useUniqId)();
  var innerId = id || uniqId;
  var currentSize = sizeFormatting(size, deviceScale);
  return /*#__PURE__*/_react["default"].createElement(StyledRoot, _extends({
    id: innerId,
    $size: currentSize
  }, rest), /*#__PURE__*/_react["default"].createElement(_SpinnerSvg.SpinnerSvg, {
    id: innerId,
    width: size,
    height: size,
    color: color
  }));
};

exports.Spinner = Spinner;