function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { css } from 'styled-components';
import { addFocus } from '../../mixins';
import { convertRoundnessMatrix } from '../../utils';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Button/Button.mixins');

/**
 * Создание специализированного миксина со своими размерами и типографикой.
 * @param {Record<string, object>} sizes
 * @param {Record<string, object>} typos
 */
export var getButtonSizesMixin = function getButtonSizesMixin(sizes, typos) {
  return function (_ref) {
    var size = _ref.size,
        pin = _ref.pin,
        outlined = _ref.outlined,
        focused = _ref.focused,
        isContentLeft = _ref.$isContentLeft,
        isContentRight = _ref.$isContentRight,
        shiftLeft = _ref.shiftLeft,
        shiftRight = _ref.shiftRight,
        square = _ref.square,
        stretch = _ref.stretch,
        theme = _ref.theme;
    var paddingX = sizes[size].paddingX;

    if (square) {
      paddingX = sizes[size].paddingY;
    } else if (stretch) {
      paddingX = sizes[size].paddingStretchX;
    } else if (isContentLeft || isContentRight) {
      paddingX = sizes[size].paddingContentX;
    }

    return css(["height:", ";padding:", " ", ";border-radius:", ";", " ", " ", " ", " ", " ", ""], sizes[size].height, sizes[size].paddingY, paddingX, convertRoundnessMatrix(pin, sizes[size].radius, sizes[size].radiusCircle), stretch && 'width: 100%;', square && " width: ".concat(sizes[size].height, ";"), shiftLeft && "margin-left: calc(-1 * ".concat(paddingX, ");"), shiftRight && "margin-right: calc(-1 * ".concat(paddingX, ");"), typos[size], addFocus(_objectSpread(_objectSpread({}, theme), {}, {
      focused: focused,
      outlined: outlined,
      outlineRadius: convertRoundnessMatrix(pin, "calc(".concat(sizes[size].radius, " + var(--plasma-outline-size))"), "calc(".concat(sizes[size].radiusCircle, " + var(--plasma-outline-size))"))
    })));
  };
};