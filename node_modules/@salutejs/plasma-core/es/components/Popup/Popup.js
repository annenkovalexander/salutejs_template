var _excluded = ["disclosure", "children", "isOpen", "trigger", "placement", "onToggle"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { memo, useRef, useCallback, useEffect } from 'react';
import styled from 'styled-components';
import { usePopper } from 'react-popper';
import { useForkRef } from '../../hooks';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Popup/Popup');
var StyledRoot = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma__sc-w3yec9-0"
})(["position:relative;box-sizing:border-box;display:inline-flex;"]);
var StyledPopup = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma__sc-w3yec9-1"
})(["position:absolute;z-index:1;padding:var(--plasma-popup-padding);margin:var(--plasma-popup-margin);width:var(--plasma-popup-width);"]);
export var getPlacement = function getPlacement(placement) {
  return "".concat(placement, "-start");
};

var getAutoPlacements = function getAutoPlacements(placements) {
  return (placements || []).map(function (placement) {
    return getPlacement(placement);
  });
};
/**
 * Всплывающее окно с возможностью позиционирования
 * и вызова по клику либо ховеру.
 */


export var Popup = /*#__PURE__*/memo( /*#__PURE__*/React.forwardRef(function (_ref, outerRootRef) {
  var disclosure = _ref.disclosure,
      children = _ref.children,
      isOpen = _ref.isOpen,
      trigger = _ref.trigger,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'auto' : _ref$placement,
      onToggle = _ref.onToggle,
      rest = _objectWithoutProperties(_ref, _excluded);

  var rootRef = useRef(null);
  var popupRef = useRef(null);
  var handleRef = useForkRef(rootRef, outerRootRef);
  var isAutoArray = Array.isArray(placement);
  var isAuto = isAutoArray || placement === 'auto';

  var _usePopper = usePopper(rootRef.current, popupRef.current, {
    placement: getPlacement(isAutoArray ? 'auto' : placement),
    modifiers: [{
      name: 'flip',
      enabled: isAuto,
      options: {
        allowedAutoPlacements: getAutoPlacements(isAutoArray ? placement : [])
      }
    }]
  }),
      styles = _usePopper.styles,
      attributes = _usePopper.attributes,
      forceUpdate = _usePopper.forceUpdate;

  var onDocumentClick = useCallback(function (event) {
    var _rootRef$current;

    var targetIsRoot = event.target === rootRef.current;
    var rootHasTarget = (_rootRef$current = rootRef.current) === null || _rootRef$current === void 0 ? void 0 : _rootRef$current.contains(event.target);

    if (!targetIsRoot && !rootHasTarget) {
      onToggle === null || onToggle === void 0 ? void 0 : onToggle(false, event);
    }
  }, [onToggle]);
  var onClick = useCallback(function (event) {
    if (trigger === 'click') {
      var _popupRef$current;

      var targetIsPopup = event.target === popupRef.current;
      var rootHasTarget = (_popupRef$current = popupRef.current) === null || _popupRef$current === void 0 ? void 0 : _popupRef$current.contains(event.target);

      if (!targetIsPopup && !rootHasTarget) {
        onToggle === null || onToggle === void 0 ? void 0 : onToggle(!isOpen, event);
      }
    }
  }, [trigger, isOpen, onToggle]);
  var onMouseEnter = useCallback(function (event) {
    if (trigger === 'hover') {
      onToggle === null || onToggle === void 0 ? void 0 : onToggle(true, event);
    }
  }, [trigger, onToggle]);
  var onMouseLeave = useCallback(function (event) {
    if (trigger === 'hover') {
      onToggle === null || onToggle === void 0 ? void 0 : onToggle(false, event);
    }
  }, [trigger, onToggle]);
  var onFocus = useCallback(function (event) {
    if (trigger === 'hover') {
      onToggle === null || onToggle === void 0 ? void 0 : onToggle(true, event);
    }
  }, [trigger, onToggle]);
  var onBlur = useCallback(function (event) {
    if (trigger === 'hover') {
      onToggle === null || onToggle === void 0 ? void 0 : onToggle(false, event);
    }
  }, [trigger, onToggle]);
  useEffect(function () {
    document.addEventListener('click', onDocumentClick);
    return function () {
      return document.removeEventListener('click', onDocumentClick);
    };
  }, []);
  useEffect(function () {
    if (!isOpen || !forceUpdate) {
      return;
    }

    forceUpdate();
  }, [isOpen]);
  return /*#__PURE__*/React.createElement(StyledRoot, _extends({
    ref: handleRef,
    onClick: onClick,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onFocus: onFocus,
    onBlur: onBlur
  }, rest), disclosure, children && /*#__PURE__*/React.createElement(StyledPopup, _extends({}, attributes.popper, {
    ref: popupRef,
    style: _objectSpread(_objectSpread({}, styles.popper), {
      display: isOpen ? 'block' : 'none'
    })
  }), children));
}));