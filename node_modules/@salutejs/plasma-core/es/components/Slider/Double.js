var _excluded = ["min", "max", "value", "disabled", "onChangeCommitted", "onChange", "ariaLabel", "multipleStepSize", "thumb"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import { SliderBase } from './SliderBase';
import { Handle } from './Handle';

function getXCenterHandle(handle) {
  var _handle$parentElement, _handle$parentElement2;

  var containerX = ((_handle$parentElement = handle.parentElement) === null || _handle$parentElement === void 0 ? void 0 : (_handle$parentElement2 = _handle$parentElement.getBoundingClientRect()) === null || _handle$parentElement2 === void 0 ? void 0 : _handle$parentElement2.x) || 0;
  var handleRect = handle.getBoundingClientRect();
  var handlePosition = handleRect.x;
  return handlePosition - containerX;
}

export var Slider = function Slider(_ref) {
  var min = _ref.min,
      max = _ref.max,
      value = _ref.value,
      disabled = _ref.disabled,
      onChangeCommitted = _ref.onChangeCommitted,
      onChange = _ref.onChange,
      ariaLabel = _ref.ariaLabel,
      _ref$multipleStepSize = _ref.multipleStepSize,
      multipleStepSize = _ref$multipleStepSize === void 0 ? 10 : _ref$multipleStepSize,
      thumb = _ref.thumb,
      rest = _objectWithoutProperties(_ref, _excluded);

  var _React$useState = React.useState({
    stepSize: 0,
    railFillWidth: 0,
    railFillXPosition: 0,
    xFirstHandle: 0,
    xSecondHandle: 0,
    firstHandleZIndex: 100,
    secondHandleZIndex: 101,
    firstValue: value[0],
    secondValue: value[1]
  }),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      state = _React$useState2[0],
      setState = _React$useState2[1];

  var firstHandleRef = React.useRef(null);
  var secondHandleRef = React.useRef(null);
  var stepSize = state.stepSize;
  React.useEffect(function () {
    var firstLocalValue = Math.min(Math.max(value[0], min), max) - min;
    var secondLocalValue = Math.min(Math.max(value[1], min), max) - min;
    setState(function (prevState) {
      return _objectSpread(_objectSpread({}, prevState), {}, {
        railFillXPosition: stepSize * firstLocalValue,
        railFillWidth: stepSize * secondLocalValue - stepSize * firstLocalValue,
        xFirstHandle: stepSize * firstLocalValue,
        xSecondHandle: stepSize * secondLocalValue
      });
    });
  }, [value, stepSize, min, max]);
  var setStepSize = React.useCallback(function (newStepSize) {
    setState(function (prevState) {
      return _objectSpread(_objectSpread({}, prevState), {}, {
        stepSize: newStepSize
      });
    });
  }, []);
  var onFirstHandleChange = React.useCallback(function (handleValue, data) {
    if (secondHandleRef !== null && secondHandleRef !== void 0 && secondHandleRef.current) {
      var newHandleXPosition = data.x;
      var secondHandleXPosition = getXCenterHandle(secondHandleRef.current);
      var fillWidth = secondHandleXPosition - newHandleXPosition;
      setState(function (prevState) {
        return _objectSpread(_objectSpread({}, prevState), {}, {
          firstHandleZIndex: 101,
          secondHandleZIndex: 100,
          railFillWidth: fillWidth < 0 ? 0 : fillWidth,
          railFillXPosition: newHandleXPosition
        });
      });

      if (onChange) {
        onChange([handleValue, value[1]]);
      }
    }
  }, [onChange, value]);
  var onFirstHandleChangeCommitted = React.useCallback(function (handleValue, data) {
    onChangeCommitted([handleValue, value[1]]);
    setState(function (prevState) {
      return _objectSpread(_objectSpread({}, prevState), {}, {
        firstValue: handleValue,
        xFirstHandle: data.lastX
      });
    });
  }, [onChangeCommitted, value]);
  var onSecondHandleChange = React.useCallback(function (handleValue, data) {
    if (firstHandleRef !== null && firstHandleRef !== void 0 && firstHandleRef.current) {
      var firstXHandleXPosition = getXCenterHandle(firstHandleRef.current);
      var newHandleXPosition = data.x;
      var fillWidth = newHandleXPosition - firstXHandleXPosition;
      setState(function (prevState) {
        return _objectSpread(_objectSpread({}, prevState), {}, {
          firstHandleZIndex: 100,
          secondHandleZIndex: 101,
          railFillWidth: fillWidth < 0 ? 0 : fillWidth,
          railFillXPosition: firstXHandleXPosition
        });
      });

      if (onChange) {
        onChange([value[0], handleValue]);
      }
    }
  }, [onChange, value]);
  var onSecondHandleChangeCommitted = React.useCallback(function (handleValue, data) {
    onChangeCommitted([value[0], handleValue]);
    setState(function (prevState) {
      return _objectSpread(_objectSpread({}, prevState), {}, {
        secondValue: handleValue,
        xSecondHandle: data.lastX
      });
    });
  }, [onChangeCommitted, value]);

  var _ref2 = ariaLabel || [],
      _ref3 = _slicedToArray(_ref2, 2),
      ariaLabelLeft = _ref3[0],
      ariaLabelRight = _ref3[1];

  var currentFirstSliderValue = Math.max(state.firstValue, min);
  return /*#__PURE__*/React.createElement(SliderBase, _extends({
    min: min,
    max: max,
    disabled: disabled,
    setStepSize: setStepSize,
    railFillWidth: state.railFillWidth,
    railFillXPosition: state.railFillXPosition
  }, rest), /*#__PURE__*/React.createElement(Handle, {
    ref: firstHandleRef,
    stepSize: state.stepSize,
    multipleStepSize: multipleStepSize,
    onChangeCommitted: onFirstHandleChangeCommitted,
    onChange: onFirstHandleChange,
    min: min,
    max: state.secondValue,
    disabled: disabled,
    bounds: [min, state.secondValue],
    side: "left",
    xPosition: state.xFirstHandle,
    zIndex: state.firstHandleZIndex,
    value: currentFirstSliderValue,
    ariaLabel: ariaLabelLeft,
    thumb: thumb
  }), /*#__PURE__*/React.createElement(Handle, {
    ref: secondHandleRef,
    stepSize: state.stepSize,
    multipleStepSize: multipleStepSize,
    onChangeCommitted: onSecondHandleChangeCommitted,
    onChange: onSecondHandleChange,
    min: min,
    ariaValueMin: currentFirstSliderValue,
    max: max,
    disabled: disabled,
    bounds: [state.firstValue, max],
    side: "right",
    xPosition: state.xSecondHandle,
    zIndex: state.secondHandleZIndex,
    value: Math.max(state.secondValue, min),
    ariaLabel: ariaLabelRight,
    thumb: thumb
  }));
};