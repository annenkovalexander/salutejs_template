function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

import React, { useState, useCallback } from 'react';
import { ToastController } from './ToastController';
import { ToastContext } from './ToastContext';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Toast/ToastProvider');
var DEFAULT_POSITION = 'bottom';
var DEFAULT_TIMEOUT = 3000;
var DEFAULT_FADE = true;

var getShowToastCallSignature = function getShowToastCallSignature(args) {
  if (_typeof(args[0]) === 'object' && 'text' in args[0]) {
    return args[0];
  } // TODO: issue https://github.com/salute-developers/plasma/issues/333


  var _args = _slicedToArray(args, 6),
      text = _args[0],
      position = _args[1],
      timeout = _args[2],
      fade = _args[3],
      contentLeft = _args[4],
      role = _args[5];

  return {
    text: text,
    position: position,
    timeout: timeout,
    fade: fade,
    contentLeft: contentLeft,
    role: role
  };
};

export var ToastProvider = function ToastProvider(_ref) {
  var children = _ref.children;

  var _useState = useState({
    text: null,
    position: null,
    timeout: null
  }),
      _useState2 = _slicedToArray(_useState, 2),
      value = _useState2[0],
      setValue = _useState2[1];

  var showToastCallback = function showToastCallback() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _getShowToastCallSign = getShowToastCallSignature(args),
        text = _getShowToastCallSign.text,
        _getShowToastCallSign2 = _getShowToastCallSign.position,
        position = _getShowToastCallSign2 === void 0 ? DEFAULT_POSITION : _getShowToastCallSign2,
        _getShowToastCallSign3 = _getShowToastCallSign.timeout,
        timeout = _getShowToastCallSign3 === void 0 ? DEFAULT_TIMEOUT : _getShowToastCallSign3,
        _getShowToastCallSign4 = _getShowToastCallSign.fade,
        fade = _getShowToastCallSign4 === void 0 ? DEFAULT_FADE : _getShowToastCallSign4,
        contentLeft = _getShowToastCallSign.contentLeft,
        role = _getShowToastCallSign.role,
        onHide = _getShowToastCallSign.onHide,
        onShow = _getShowToastCallSign.onShow,
        offset = _getShowToastCallSign.offset;

    setValue({
      text: text,
      position: position,
      timeout: timeout,
      fade: fade,
      contentLeft: contentLeft,
      role: role,
      onHide: onHide,
      onShow: onShow,
      offset: offset
    });

    if (onShow) {
      onShow();
    }
  };

  var showToast = useCallback(showToastCallback, []);
  var onHide = value.onHide;
  var hideToast = useCallback(function () {
    setValue({
      text: null,
      position: null,
      timeout: null
    });

    if (onHide) {
      onHide();
    }
  }, [onHide]);
  return /*#__PURE__*/React.createElement(ToastContext.Provider, {
    value: _objectSpread(_objectSpread({}, value), {}, {
      showToast: showToast,
      hideToast: hideToast
    })
  }, children, /*#__PURE__*/React.createElement(ToastController, value));
};