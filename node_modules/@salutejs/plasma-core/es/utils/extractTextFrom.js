function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

import { isValidElement, Children } from 'react';
export var extractTextFrom = function extractTextFrom(textSource) {
  switch (_typeof(textSource)) {
    case 'string':
      return textSource;

    case 'number':
      return textSource.toString();

    case 'object':
      {
        if (! /*#__PURE__*/isValidElement(textSource) || !textSource.props || !textSource.props.children) {
          return '';
        }

        return Children.map(textSource.props.children, function (child) {
          return extractTextFrom(child);
        }).join('');
      }

    default:
      return '';
  }
};