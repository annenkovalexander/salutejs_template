"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CarouselLiteBasic = exports.Vertical = exports.CarouselVirtualBasic = exports.Basic = void 0;

var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));

var _plasmaCore = /*#__PURE__*/require("@salutejs/plasma-core");

var _useVirtual2 = /*#__PURE__*/require("@salutejs/use-virtual");

var _Grid = /*#__PURE__*/require("../Grid");

var _ = /*#__PURE__*/require(".");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var items = /*#__PURE__*/Array(100).fill({
  title: 'Заголовок',
  subtitle: 'Описание уравнение времени, сублимиpуя с повеpхности ядpа кометы, вращает реликтовый ледник',
  imageSrc: '/images/320_320_n.jpg'
}).map(function (_ref, i) {
  var title = _ref.title,
      subtitle = _ref.subtitle,
      imageSrc = _ref.imageSrc;
  return {
    id: "slide_".concat(i),
    title: "".concat(title, " ").concat(i),
    subtitle: "".concat(subtitle, " ").concat(i),
    imageSrc: imageSrc.replace('n', i % 12)
  };
});
var basicCarouselStyle = {
  paddingTop: '1.25rem',
  paddingBottom: '1.25rem'
};
var basicProps = {
  displayGrid: true,
  animatedScrollByIndex: true,
  scrollAlign: 'start',
  scrollSnapType: 'mandatory',
  scrollSnapAlign: 'start',
  detectActive: true,
  detectThreshold: 0.5
};

var Basic = function Basic() {
  var animatedScrollByIndex = basicProps.animatedScrollByIndex,
      scrollAlign = basicProps.scrollAlign,
      scrollSnapType = basicProps.scrollSnapType,
      scrollSnapAlign = basicProps.scrollSnapAlign,
      detectActive = basicProps.detectActive,
      detectThreshold = basicProps.detectThreshold;
  var axis = 'x';
  var delay = 30;
  var longDelay = 150;

  var _useRemoteHandlers = (0, _.useRemoteHandlers)({
    initialIndex: 0,
    axis: axis,
    delay: delay,
    longDelay: longDelay,
    min: 0,
    max: items.length - 1
  }),
      _useRemoteHandlers2 = _slicedToArray(_useRemoteHandlers, 2),
      index = _useRemoteHandlers2[0],
      setIndex = _useRemoteHandlers2[1];

  return /*#__PURE__*/_react["default"].createElement(_.CarouselGridWrapper, null, /*#__PURE__*/_react["default"].createElement(_.Carousel, {
    id: "carousel",
    as: _Grid.Row,
    axis: axis,
    index: index,
    animatedScrollByIndex: animatedScrollByIndex,
    scrollAlign: scrollAlign,
    scrollSnapType: scrollSnapType,
    detectActive: detectActive,
    detectThreshold: detectThreshold,
    onIndexChange: setIndex,
    style: basicCarouselStyle
  }, items.map(function (_ref2, i) {
    var title = _ref2.title,
        subtitle = _ref2.subtitle;
    return /*#__PURE__*/_react["default"].createElement(_.CarouselCol, {
      key: "item:".concat(i),
      size: 3,
      sizeXL: 4,
      scrollSnapAlign: scrollSnapAlign,
      "aria-label": "".concat(i + 1, " \u0438\u0437 ").concat(items.length),
      "aria-selected": i === index
    }, title, subtitle);
  })));
};

exports.Basic = Basic;

var CarouselVirtualBasic = function CarouselVirtualBasic() {
  // INFO: deviceScale = 1 (Mobile), deviceScale = 2 (Sberbox, TV, Portal)
  var parentRef = (0, _react.useRef)(null);
  var axis = 'x';
  var width = 450;
  var gap = 40;

  var _useVirtual = (0, _useVirtual2.useVirtual)({
    itemCount: 100,
    parentRef: parentRef,
    axis: axis,
    // estimateSize должен возвращать значение в px.
    estimateSize: (0, _react.useCallback)(function () {
      return width + gap;
    }, [width, gap]),
    overscan: 6
  }),
      visibleItems = _useVirtual.visibleItems,
      totalSize = _useVirtual.totalSize;

  return /*#__PURE__*/_react["default"].createElement(_.CarouselGridWrapper, null, /*#__PURE__*/_react["default"].createElement(_.CarouselVirtual, {
    ref: parentRef,
    as: _Grid.Row,
    axis: axis,
    style: {
      paddingTop: '1.25rem',
      paddingBottom: '1.25rem',
      height: '22rem'
    },
    virtualSize: totalSize
  }, visibleItems.map(function (_ref3) {
    var i = _ref3.index,
        start = _ref3.start;
    var _items$i = items[i],
        title = _items$i.title,
        subtitle = _items$i.subtitle;
    return /*#__PURE__*/_react["default"].createElement(_plasmaCore.CarouselItemVirtual, {
      key: "item:".concat(i),
      left: start,
      style: {
        width: "".concat(width, "px")
      },
      "aria-label": "".concat(i + 1, " \u0438\u0437 ").concat(items.length)
    }, title, subtitle);
  })));
};

exports.CarouselVirtualBasic = CarouselVirtualBasic;
var verticalStyle = {
  height: '100vh',
  maxHeight: '40rem',
  width: '100%',
  maxWidth: '22.5rem',
  margin: '0 auto',
  padding: '0.75rem'
};
var verticalCarouselItemStyle = {
  padding: '0.75rem 0'
};

var Vertical = function Vertical() {
  var animatedScrollByIndex = basicProps.animatedScrollByIndex,
      scrollAlign = basicProps.scrollAlign,
      scrollSnapType = basicProps.scrollSnapType,
      scrollSnapAlign = basicProps.scrollSnapAlign,
      detectActive = basicProps.detectActive,
      detectThreshold = basicProps.detectThreshold;
  var axis = 'y';

  var _useRemoteHandlers3 = (0, _.useRemoteHandlers)({
    initialIndex: 0,
    axis: axis,
    delay: 30,
    longDelay: 150,
    min: 0,
    max: items.length - 1
  }),
      _useRemoteHandlers4 = _slicedToArray(_useRemoteHandlers3, 2),
      index = _useRemoteHandlers4[0],
      setIndex = _useRemoteHandlers4[1];

  return /*#__PURE__*/_react["default"].createElement(_.Carousel, {
    id: "carousel",
    axis: axis,
    index: index,
    animatedScrollByIndex: animatedScrollByIndex,
    scrollAlign: scrollAlign,
    scrollSnapType: scrollSnapType,
    detectActive: detectActive,
    detectThreshold: detectThreshold,
    onIndexChange: setIndex,
    paddingStart: "50%",
    paddingEnd: "50%",
    style: verticalStyle
  }, items.map(function (_ref4, i) {
    var title = _ref4.title,
        subtitle = _ref4.subtitle;
    return /*#__PURE__*/_react["default"].createElement(_.CarouselItem, {
      key: "item:".concat(i),
      scrollSnapAlign: scrollSnapAlign,
      style: verticalCarouselItemStyle,
      "aria-label": "".concat(i + 1, " \u0438\u0437 ").concat(items.length),
      "aria-selected": i === index
    }, title, subtitle);
  }));
};

exports.Vertical = Vertical;
var carouselLiteBasicProps = {
  displayGrid: true,
  scrollAlign: 'start',
  scrollSnapType: 'mandatory',
  scrollSnapAlign: 'start'
};

var CarouselLiteBasic = function CarouselLiteBasic() {
  var scrollAlign = carouselLiteBasicProps.scrollAlign,
      scrollSnapType = carouselLiteBasicProps.scrollSnapType,
      scrollSnapAlign = carouselLiteBasicProps.scrollSnapAlign;
  var axis = 'x';
  var delay = 30;
  var longDelay = 150;

  var _useRemoteHandlers5 = (0, _.useRemoteHandlers)({
    initialIndex: 40,
    axis: axis,
    delay: delay,
    longDelay: longDelay,
    min: 0,
    max: items.length - 1
  }),
      _useRemoteHandlers6 = _slicedToArray(_useRemoteHandlers5, 1),
      index = _useRemoteHandlers6[0];

  return /*#__PURE__*/_react["default"].createElement(_.CarouselGridWrapper, null, /*#__PURE__*/_react["default"].createElement(_.CarouselLite, {
    id: "carousel-lite",
    as: _Grid.Row,
    axis: axis,
    index: index,
    scrollAlign: scrollAlign,
    scrollSnapType: scrollSnapType,
    style: basicCarouselStyle
  }, items.map(function (_ref5, i) {
    var title = _ref5.title,
        subtitle = _ref5.subtitle;
    return /*#__PURE__*/_react["default"].createElement(_.CarouselCol, {
      key: "item:".concat(i),
      size: 3,
      sizeXL: 4,
      scrollSnapAlign: scrollSnapAlign,
      "aria-label": "".concat(i + 1, " \u0438\u0437 ").concat(items.length),
      "aria-selected": i === index
    }, title, subtitle);
  })));
};

exports.CarouselLiteBasic = CarouselLiteBasic;