"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ActionButton = void 0;

var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));

var _styledComponents = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("styled-components"));

var _plasmaCore = /*#__PURE__*/require("@salutejs/plasma-core");

var _hooks = /*#__PURE__*/require("../../hooks");

var _mixins = /*#__PURE__*/require("../../mixins");

var _ActionButton = /*#__PURE__*/require("./ActionButton.sizes");

var _collectPackageInfo = /*#__PURE__*/require("../../collectPackageInfo");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

(0, _collectPackageInfo.collectPackageInfo)('Button/ActionButton');
var buttonSizes = {
  l: {
    height: 'var(--plasma-actionbutton-l-height)',
    paddingY: 'var(--plasma-actionbutton-l-padding-y)',
    paddingX: 'var(--plasma-actionbutton-l-padding-x)',
    paddingContentX: 'var(--plasma-actionbutton-l-padding-content-x)',
    paddingStretchX: 'var(--plasma-actionbutton-l-padding-stretch-x)',
    radius: 'var(--plasma-actionbutton-l-radius)',
    radiusCircle: 'var(--plasma-actionbutton-l-radius-circle)'
  },
  m: {
    height: 'var(--plasma-actionbutton-m-height)',
    paddingY: 'var(--plasma-actionbutton-m-padding-y)',
    paddingX: 'var(--plasma-actionbutton-m-padding-x)',
    paddingContentX: 'var(--plasma-actionbutton-m-padding-content-x)',
    paddingStretchX: 'var(--plasma-actionbutton-m-padding-stretch-x)',
    radius: 'var(--plasma-actionbutton-m-radius)',
    radiusCircle: 'var(--plasma-actionbutton-m-radius-circle)'
  },
  s: {
    height: 'var(--plasma-actionbutton-s-height)',
    paddingY: 'var(--plasma-actionbutton-s-padding-y)',
    paddingX: 'var(--plasma-actionbutton-s-padding-x)',
    paddingContentX: 'var(--plasma-actionbutton-s-padding-content-x)',
    paddingStretchX: 'var(--plasma-actionbutton-s-padding-stretch-x)',
    radius: 'var(--plasma-actionbutton-s-radius)',
    radiusCircle: 'var(--plasma-actionbutton-s-radius-circle)'
  }
};
var buttonTypography = {
  xs: _plasmaCore.button2,
  xxs: _plasmaCore.caption,
  xxxs: _plasmaCore.caption
};
var applySizes = /*#__PURE__*/(0, _plasmaCore.getButtonSizesMixin)(buttonSizes, buttonTypography);

var applyViews = function applyViews(_ref) {
  var view = _ref.view;
  return _plasmaCore.buttonViews[view];
};

var StyledButtonRoot = /*#__PURE__*/(0, _styledComponents["default"])(_plasmaCore.ButtonRoot).withConfig({
  componentId: "plasma-ui__sc-1cy29p1-0"
})(["", " ", " ", " ", " ", ""], _ActionButton.sizes, applySizes, applyViews, _mixins.applyInteraction, _plasmaCore.applyNoSelect);
/**
 * Кнопка для размещения внутри карточек.
 * Упрощенная версия ``Button`` для создания квадратных кнопок (с соотношением сторон 1:1).
 * Размеры ``ActionButton`` меньше размеров ``Button``.
 * Обладает теми же цветами, размерами и модификаторами, что и основная кнопка.
 */

var ButtonBase = /*#__PURE__*/(0, _plasmaCore.createButton)(StyledButtonRoot);
var ActionButton = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var _useThemeContext = (0, _hooks.useThemeContext)(),
      deviceScale = _useThemeContext.deviceScale;

  return /*#__PURE__*/_react["default"].createElement(ButtonBase, _extends({}, props, {
    ref: ref,
    deviceScale: deviceScale
  }));
});
exports.ActionButton = ActionButton;
ActionButton.defaultProps = {
  size: 'm',
  view: 'secondary',
  pin: 'square-square',
  square: true,
  outlined: true,
  scaleOnInteraction: true
};