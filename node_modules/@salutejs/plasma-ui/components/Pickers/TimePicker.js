"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimePicker = void 0;

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _styledComponents = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("styled-components"));

var _plasmaCore = /*#__PURE__*/require("@salutejs/plasma-core");

var _PickerDots = /*#__PURE__*/require("./PickerDots");

var _SimpleTimePicker = /*#__PURE__*/require("./SimpleTimePicker");

var _utils = /*#__PURE__*/require("./utils");

var _collectPackageInfo = /*#__PURE__*/require("../../collectPackageInfo");

var _excluded = ["id", "options", "step", "size", "value", "min", "max", "disabled", "controls", "autofocus", "scrollSnapType", "visibleItems", "onChange", "name", "enableNativeControl", "secondsAriaLabel", "minutesAriaLabel", "hoursAriaLabel", "infiniteScroll", "disableScrollSnapAlign"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

(0, _collectPackageInfo.collectPackageInfo)('Pickers/TimePicker');

var StyledWrapper = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma-ui__sc-1q5khb9-0"
})(["display:flex;width:max-content;align-items:stretch;"]);

var defaultOptions = {
  hours: true,
  minutes: true,
  seconds: true
};
/**
 * Вернёт секунды
 */

var getSeconds = function getSeconds(_ref) {
  var _ref2 = _slicedToArray(_ref, 3),
      hours = _ref2[0],
      minutes = _ref2[1],
      seconds = _ref2[2];

  return hours * 60 * 60 + minutes * 60 + seconds;
};

/**
 * Компонент для выбора времени.
 */
var TimePicker = function TimePicker(_ref3) {
  var id = _ref3.id,
      _ref3$options = _ref3.options,
      options = _ref3$options === void 0 ? defaultOptions : _ref3$options,
      step = _ref3.step,
      size = _ref3.size,
      value = _ref3.value,
      min = _ref3.min,
      max = _ref3.max,
      disabled = _ref3.disabled,
      controls = _ref3.controls,
      autofocus = _ref3.autofocus,
      scrollSnapType = _ref3.scrollSnapType,
      visibleItems = _ref3.visibleItems,
      onChange = _ref3.onChange,
      name = _ref3.name,
      enableNativeControl = _ref3.enableNativeControl,
      secondsAriaLabel = _ref3.secondsAriaLabel,
      minutesAriaLabel = _ref3.minutesAriaLabel,
      hoursAriaLabel = _ref3.hoursAriaLabel,
      infiniteScroll = _ref3.infiniteScroll,
      _ref3$disableScrollSn = _ref3.disableScrollSnapAlign,
      disableScrollSnapAlign = _ref3$disableScrollSn === void 0 ? false : _ref3$disableScrollSn,
      rest = _objectWithoutProperties(_ref3, _excluded);

  var normalizeValues = _react["default"].useMemo(function () {
    return (0, _utils.getNormalizeValues)(_utils.getTimeValues, getSeconds)(value, min, max);
  }, [value]);

  var _React$useState = _react["default"].useState(value),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      prevValue = _React$useState2[0],
      setPrevValue = _React$useState2[1];

  var _React$useState3 = _react["default"].useState(normalizeValues),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      _React$useState4$ = _slicedToArray(_React$useState4[0], 3),
      hours = _React$useState4$[0],
      minutes = _React$useState4$[1],
      seconds = _React$useState4$[2],
      setState = _React$useState4[1];

  var _getTimeValues = (0, _utils.getTimeValues)(min),
      _getTimeValues2 = _slicedToArray(_getTimeValues, 3),
      minHours = _getTimeValues2[0],
      minMinutes = _getTimeValues2[1],
      minSeconds = _getTimeValues2[2];

  var _getTimeValues3 = (0, _utils.getTimeValues)(max),
      _getTimeValues4 = _slicedToArray(_getTimeValues3, 3),
      maxHours = _getTimeValues4[0],
      maxMinutes = _getTimeValues4[1],
      maxSeconds = _getTimeValues4[2];

  var isFirstMounted = _react["default"].useRef(true); // Диапазоны для списков зависят от min и max,
  // при чем min и max принимаются как возможные предельные значения,
  // а не как контейнеры для компонент hours, minutes, seconds


  var _React$useMemo = _react["default"].useMemo(function () {
    var minMins = 0;
    var maxMins = 59;
    var minSecs = 0;
    var maxSecs = 59;

    if (hours === minHours) {
      minMins = minMinutes;
    }

    if (hours === maxHours) {
      maxMins = maxMinutes;
    }

    if (hours === minHours && minutes === minMinutes) {
      minSecs = minSeconds;
    }

    if (hours === maxHours && minutes === maxMinutes) {
      maxSecs = maxSeconds;
    }

    var hoursStep = 1;
    var minsStep = 1;
    var secsStep = 1;

    if (step) {
      var hoursMod = step % 3600;
      var minsMod = hoursMod % 60;
      hoursStep = (step - hoursMod) / 3600 || 1;
      minsStep = (hoursMod - minsMod) / 60 || 1;
      secsStep = minsMod || 1;
    }

    return [(0, _utils.getRange)(minHours, maxHours, hoursStep), (0, _utils.getRange)(minMins, maxMins, minsStep), (0, _utils.getRange)(minSecs, maxSecs, secsStep)];
  }, [minHours, maxHours, minMinutes, maxMinutes, minSeconds, maxSeconds, hours === maxHours || hours === minHours, minutes === minMinutes || minutes === maxMinutes, step]),
      _React$useMemo2 = _slicedToArray(_React$useMemo, 3),
      hoursRange = _React$useMemo2[0],
      minsRange = _React$useMemo2[1],
      secsRange = _React$useMemo2[2];

  var onHoursChange = _react["default"].useCallback(function (_ref4) {
    var h = _ref4.value;
    return setState(function (_ref5) {
      var _ref6 = _slicedToArray(_ref5, 3),
          m = _ref6[1],
          s = _ref6[2];

      return [h, m, s];
    });
  }, []);

  var onMinutesChange = _react["default"].useCallback(function (_ref7) {
    var m = _ref7.value;
    return setState(function (_ref8) {
      var _ref9 = _slicedToArray(_ref8, 3),
          h = _ref9[0],
          s = _ref9[2];

      return [h, m, s];
    });
  }, []);

  var onSecondsChange = _react["default"].useCallback(function (_ref10) {
    var s = _ref10.value;
    return setState(function (_ref11) {
      var _ref12 = _slicedToArray(_ref11, 2),
          h = _ref12[0],
          m = _ref12[1];

      return [h, m, s];
    });
  }, []);
  /**
   * Если значение (value) обновилось извне, необходимо изменить стейт
   */


  if (prevValue.getTime() !== value.getTime()) {
    setPrevValue(value);
    setState(function (prevTime) {
      var _getValuesInRange = (0, _utils.getValuesInRange)([hoursRange, minsRange, secsRange], normalizeValues, value),
          _getValuesInRange2 = _slicedToArray(_getValuesInRange, 3),
          newHours = _getValuesInRange2[0],
          newMins = _getValuesInRange2[1],
          newSecs = _getValuesInRange2[2];

      if (!(0, _utils.isChanged)(prevTime, [newHours, newMins, newSecs])) {
        return prevTime;
      }

      return [newHours, newMins, newSecs];
    });
  }
  /**
   * Если обновился внутренний стейт, необходимо проверить условия
   * и вызвать событие изменения, создав новый экземпляр Date
   */


  (0, _plasmaCore.useIsomorphicLayoutEffect)(function () {
    var prevTime = [value.getHours(), value.getMinutes(), value.getSeconds()];

    if (!isFirstMounted.current || (0, _utils.isChanged)(prevTime, [hours, minutes, seconds])) {
      onChange === null || onChange === void 0 ? void 0 : onChange((0, _utils.getNewDate)(value, [hours, minutes, seconds]));
    }

    isFirstMounted.current = false;
  }, [hours, minutes, seconds]);
  /**
   * Если значение (value) выпадает из диапазона в зависимости от шага (step),
   * необходимо нормализовать значения, изменить стейт
   */

  var newTime = (0, _utils.getValuesInRange)([hoursRange, minsRange, secsRange], [hours, minutes, seconds], value);

  if ((0, _utils.isChanged)([hours, minutes, seconds], newTime)) {
    setState(newTime);
  }

  return /*#__PURE__*/_react["default"].createElement(StyledWrapper, _extends({
    id: id
  }, rest), options.hours && /*#__PURE__*/_react["default"].createElement(_SimpleTimePicker.SimpleTimePicker, {
    id: id,
    type: "hours",
    autofocus: autofocus,
    disabled: disabled,
    controls: controls,
    visibleItems: visibleItems,
    size: size,
    range: hoursRange,
    value: hours,
    scrollSnapType: scrollSnapType,
    infiniteScroll: infiniteScroll,
    onChange: onHoursChange,
    "aria-label": hoursAriaLabel,
    disableScrollSnapAlign: disableScrollSnapAlign
  }), options.hours && options.minutes && /*#__PURE__*/_react["default"].createElement(_PickerDots.PickerDots, {
    $size: size
  }), options.minutes && /*#__PURE__*/_react["default"].createElement(_SimpleTimePicker.SimpleTimePicker, {
    id: id,
    type: "minutes",
    autofocus: autofocus && !options.hours,
    disabled: disabled,
    controls: controls,
    visibleItems: visibleItems,
    size: size,
    range: minsRange,
    value: minutes,
    scrollSnapType: scrollSnapType,
    infiniteScroll: infiniteScroll,
    onChange: onMinutesChange,
    "aria-label": minutesAriaLabel,
    disableScrollSnapAlign: disableScrollSnapAlign
  }), options.minutes && options.seconds && /*#__PURE__*/_react["default"].createElement(_PickerDots.PickerDots, {
    $size: size
  }), options.seconds && /*#__PURE__*/_react["default"].createElement(_SimpleTimePicker.SimpleTimePicker, {
    id: id,
    type: "seconds",
    autofocus: autofocus && !options.hours && !options.minutes,
    disabled: disabled,
    controls: controls,
    visibleItems: visibleItems,
    size: size,
    range: secsRange,
    value: seconds,
    scrollSnapType: scrollSnapType,
    infiniteScroll: infiniteScroll,
    onChange: onSecondsChange,
    "aria-label": secondsAriaLabel,
    disableScrollSnapAlign: disableScrollSnapAlign
  }), enableNativeControl && /*#__PURE__*/_react["default"].createElement("input", {
    type: "hidden",
    value: value.toISOString(),
    name: name
  }));
};

exports.TimePicker = TimePicker;