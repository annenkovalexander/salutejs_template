"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Slider = void 0;

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));

var _styledComponents = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("styled-components"));

var _plasmaCore = /*#__PURE__*/require("@salutejs/plasma-core");

var _plasmaTokens = /*#__PURE__*/require("@salutejs/plasma-tokens");

var _hooks = /*#__PURE__*/require("../../hooks");

var _collectPackageInfo = /*#__PURE__*/require("../../collectPackageInfo");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

(0, _collectPackageInfo.collectPackageInfo)('Slider/Slider');
var sliderSettings = {
  indent: 0.8125,
  backgroundColor: _plasmaTokens.surfaceLiquid03,
  fillColor: _plasmaTokens.buttonAccent
};
var StyledThumb = /*#__PURE__*/(0, _styledComponents["default"])(_plasmaCore.ThumbBase).withConfig({
  componentId: "plasma-ui__sc-847gqm-0"
})(["width:1.5rem;height:1.5rem;border:0.063rem solid ", ";background-color:", ";color:", ";"], _plasmaTokens.surfaceLiquid03, _plasmaTokens.white, _plasmaTokens.accent);

var Slider = function Slider(props) {
  var _theme$deviceScale;

  var theme = (0, _hooks.useThemeContext)();
  var fontSizeMultiplier = ((_theme$deviceScale = theme === null || theme === void 0 ? void 0 : theme.deviceScale) !== null && _theme$deviceScale !== void 0 ? _theme$deviceScale : _plasmaTokens.sberPortalScale) * _plasmaTokens.scalingPixelBasis;
  return /*#__PURE__*/_react["default"].createElement(_plasmaCore.SliderCore, _extends({}, props, {
    settings: _objectSpread(_objectSpread({}, sliderSettings), {}, {
      fontSizeMultiplier: fontSizeMultiplier
    }),
    thumb: StyledThumb
  }));
};

exports.Slider = Slider;