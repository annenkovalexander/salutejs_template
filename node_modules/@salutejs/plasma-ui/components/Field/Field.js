"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.applyInputStyles = exports.FieldHelper = void 0;

var _styledComponents = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("styled-components"));

var _plasmaCore = /*#__PURE__*/require("@salutejs/plasma-core");

var _collectPackageInfo = /*#__PURE__*/require("../../collectPackageInfo");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

(0, _collectPackageInfo.collectPackageInfo)('Field/Field');
var FieldHelper = /*#__PURE__*/(0, _styledComponents["default"])(_plasmaCore.FieldHelper).withConfig({
  componentId: "plasma-ui__sc-1nck119-0"
})(["padding-left:1rem;padding-right:1rem;"]); // TODO: https://github.com/salute-developers/plasma/issues/232

exports.FieldHelper = FieldHelper;

var applyInputStyles = function applyInputStyles(_ref) {
  var $isFocused = _ref.$isFocused;
  return (0, _styledComponents.css)(["background-color:", ";color:", ";transition:", ";&::placeholder{color:", ";}&:focus:not(:read-only){background-color:", ";}", ""], _plasmaCore.surfaceLiquid01, _plasmaCore.primary, function (_ref2) {
    var theme = _ref2.theme;
    return theme.lowPerformance ? 'unset' : 'background-color 0.1s ease-in-out';
  }, _plasmaCore.secondary, _plasmaCore.surfaceLiquid02, $isFocused && (0, _styledComponents.css)(["background-color:", ";"], _plasmaCore.surfaceLiquid02));
};

exports.applyInputStyles = applyInputStyles;