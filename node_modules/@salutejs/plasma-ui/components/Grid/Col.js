"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Col = void 0;

var _styledComponents = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("styled-components"));

var _utils = /*#__PURE__*/require("../../utils");

var _types = /*#__PURE__*/require("./types");

var _collectPackageInfo = /*#__PURE__*/require("../../collectPackageInfo");

var _excluded = ["type", "theme", "size", "offset"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

(0, _collectPackageInfo.collectPackageInfo)('Grid/Col');

// TODO: https://github.com/salute-developers/plasma/issues/232

/**
 * Блок для размещения контента или строк (``Row``) внутри себя.
 *
 * ``<Col type="rel" />`` — предназначается для верстки с страниц. Поведение по умолчанию.
 * Ширина и отступ данного подтипа колонок имеют относительное значение, которое выражается в процентах.
 *
 * ``<Col type="calc" />`` — предназначается для верстки каруселей.
 * Ширина и отступ данного подтипа колонок рассчитываются на основе ширины контейнера и хранятся в ``CSS Variables``.
 * С примером использования можно ознакомиться в документации по [каруселям](/?path=/docs/controls-carousel--basic).
 */
var Col = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma-ui__sc-nqfuxs-0"
})(["box-sizing:border-box;padding-left:var(--plasma-grid-gutter);padding-right:var(--plasma-grid-gutter);", ""], function (_ref) {
  var _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'rel' : _ref$type,
      theme = _ref.theme,
      size = _ref.size,
      offset = _ref.offset,
      props = _objectWithoutProperties(_ref, _excluded);

  return _utils.gridSizes.map(function (breakpoint) {
    var bpSize = _types.sizes[breakpoint];
    var bpOffset = _types.offsets[breakpoint];
    var colSize = props[bpSize] || size;
    var colOffset = props[bpOffset] || offset;
    return (0, _utils.mediaQuery)(breakpoint, theme.deviceScale)((0, _styledComponents.css)(["", " ", " ", " ", ""], type === 'rel' && colSize && "width: ".concat(100 / _utils.gridColumns[breakpoint] * colSize, "%;"), type === 'rel' && colOffset && "margin-left: ".concat(100 / _utils.gridColumns[breakpoint] * colOffset, "%;"), type === 'calc' && colSize && "width: calc(var(--plasma-grid-column-width) * ".concat(colSize, ");"), type === 'calc' && colOffset && "margin-left: calc(var(--plasma-grid-column-width) * ".concat(colOffset, ");")));
  });
});

exports.Col = Col;