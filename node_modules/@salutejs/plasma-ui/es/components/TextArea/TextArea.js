var _excluded = ["id", "disabled", "status", "label", "placeholder", "contentRight", "helperText", "style", "className"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { FieldRoot, FieldContent, TextArea as BaseArea } from '@salutejs/plasma-core';
import { FieldHelper, applyInputStyles } from '../Field';
import { spatnavClassNameAttrs } from '../../utils';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('TextArea/TextArea');
var StyledTextArea = /*#__PURE__*/styled(BaseArea).attrs(spatnavClassNameAttrs).withConfig({
  componentId: "plasma-ui__sc-qulw5x-0"
})(["", " border-radius:1rem;"], applyInputStyles);
/**
 * Поле ввода многострочного текста.
 */
// eslint-disable-next-line prefer-arrow-callback

export var TextArea = /*#__PURE__*/forwardRef(function TextArea(_ref, ref) {
  var id = _ref.id,
      disabled = _ref.disabled,
      status = _ref.status,
      label = _ref.label,
      placeholder = _ref.placeholder,
      contentRight = _ref.contentRight,
      helperText = _ref.helperText,
      style = _ref.style,
      className = _ref.className,
      rest = _objectWithoutProperties(_ref, _excluded);

  var placeLabel = label || placeholder;
  return /*#__PURE__*/React.createElement(FieldRoot, {
    $disabled: disabled,
    $isContentRight: Boolean(contentRight),
    $isHelper: Boolean(helperText),
    status: status,
    style: style,
    className: className,
    "aria-describedby": id ? "".concat(id, "-helpertext") : undefined
  }, /*#__PURE__*/React.createElement(StyledTextArea, _extends({
    ref: ref,
    id: id,
    placeholder: placeLabel,
    disabled: disabled,
    status: status
  }, rest)), contentRight && /*#__PURE__*/React.createElement(FieldContent, {
    pos: "right"
  }, contentRight), helperText && /*#__PURE__*/React.createElement(FieldHelper, {
    id: id ? "".concat(id, "-helpertext") : undefined
  }, helperText));
});