var _CompatibleTypo;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import { createGlobalStyle, ThemeProvider } from 'styled-components';
import { sberPortal, sberBox, mobile, sberPortalScale } from '@salutejs/plasma-tokens';
import { transformStyles } from '@salutejs/plasma-core';
import { standard, compatible } from '@salutejs/plasma-typo';
import { detectDevice, deviceScales } from '../../utils';
/* stylelint-disable */

import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Device/DeviceDetection');

var transformWithRoot = function transformWithRoot(typo) {
  return "\n:root {\n    ".concat(transformStyles(typo[':root']), "\n}");
};

var typoSizes = {
  sberBox: /*#__PURE__*/createGlobalStyle(["", ""], /*#__PURE__*/transformWithRoot(sberBox)),
  sberPortal: /*#__PURE__*/createGlobalStyle(["", ""], /*#__PURE__*/transformWithRoot(sberPortal)),
  mobile: /*#__PURE__*/createGlobalStyle(["", ""], /*#__PURE__*/transformWithRoot(mobile))
};
/* stylelint-enable */

var StandardTypo = /*#__PURE__*/createGlobalStyle(standard);
var CompatibleTypo = /*#__PURE__*/createGlobalStyle(compatible);

/**
 * Провайдер обязателен для использования, необходимо обернуть в него все приложение.
 *
 * Назначение - определяет, на какой *поверхности* (**устройстве**) запущено приложение.
 *
 * В зависимости от поверхности, применяет глобальные стили типографики,
 * подходящие данной платформе, ко всему приложению.
 *
 * Функцией определения по умолчанию тип поверхности определяется на основании `userAgent`,
 * при отсутствии `navigator` или `userAgent`, поверхность будет определен как `sberBox`.
 *
 * Имеется возможность передать провайдеру собственную логику определения девайса
 * с помощью пропса `detectDeviceCallback`.
 * При этом стоит помнить, что разрешены только 3 стандартных значения.
 */
export var DeviceThemeProvider = function DeviceThemeProvider(_ref) {
  var theme = _ref.theme,
      children = _ref.children,
      _ref$detectDeviceCall = _ref.detectDeviceCallback,
      detectDeviceCallback = _ref$detectDeviceCall === void 0 ? detectDevice : _ref$detectDeviceCall,
      _ref$responsiveTypo = _ref.responsiveTypo,
      responsiveTypo = _ref$responsiveTypo === void 0 ? false : _ref$responsiveTypo,
      _ref$lowPerformance = _ref.lowPerformance,
      lowPerformance = _ref$lowPerformance === void 0 ? false : _ref$lowPerformance,
      _ref$breakWord = _ref.breakWord,
      breakWord = _ref$breakWord === void 0 ? true : _ref$breakWord;
  var deviceKind = detectDeviceCallback();
  var deviceScale = deviceScales[deviceKind] || sberPortalScale;
  var Typo = React.useMemo(function () {
    return typoSizes[deviceKind];
  }, [deviceKind]);
  return /*#__PURE__*/React.createElement(ThemeProvider, {
    theme: _objectSpread(_objectSpread({}, theme), {}, {
      deviceScale: deviceScale,
      lowPerformance: lowPerformance,
      breakWord: breakWord,
      deviceKind: deviceKind
    })
  }, responsiveTypo ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StandardTypo, {
    deviceScale: deviceScale,
    breakWord: breakWord
  }), _CompatibleTypo || (_CompatibleTypo = /*#__PURE__*/React.createElement(CompatibleTypo, null))) : /*#__PURE__*/React.createElement(Typo, null), children);
};