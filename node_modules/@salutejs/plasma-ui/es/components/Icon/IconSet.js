function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React from 'react';
import styled from 'styled-components';
import { Icon, iconSectionsSet } from '@salutejs/plasma-icons';
import { Cell } from '../Cell';
import { Row, Col } from '../Grid';
import { TextBox } from '../TextBox';
import { Headline3 } from '../Typography';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Icon/IconSet');
var StyledRow = /*#__PURE__*/styled(Row).withConfig({
  componentId: "plasma-ui__sc-1littwk-0"
})(["flex-wrap:wrap;"]);
var StyledIcon = /*#__PURE__*/styled(Icon).withConfig({
  componentId: "plasma-ui__sc-1littwk-1"
})(["margin:0.125rem 0.75rem 0.125rem 0;"]);
var StyledHeading = /*#__PURE__*/styled(Headline3).withConfig({
  componentId: "plasma-ui__sc-1littwk-2"
})(["margin:2rem 0 1rem;color:", ";"], function (_ref) {
  var color = _ref.color;
  return color;
});
export var IconSet = function IconSet(_ref2) {
  var size = _ref2.size,
      color = _ref2.color,
      exclude = _ref2.exclude,
      include = _ref2.include;
  return /*#__PURE__*/React.createElement(StyledRow, null, Object.entries(iconSectionsSet).map(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
        sectionName = _ref4[0],
        section = _ref4[1];

    var filteredIcons = Object.keys(section).filter(function (icon) {
      if (exclude) {
        return !exclude.includes(icon);
      }

      return include ? include.includes(icon) : true;
    });
    return filteredIcons && filteredIcons.length > 0 && /*#__PURE__*/React.createElement(Col, {
      key: sectionName,
      size: 2
    }, /*#__PURE__*/React.createElement(StyledHeading, null, sectionName), filteredIcons.map(function (icon) {
      return /*#__PURE__*/React.createElement(Cell, {
        key: icon,
        contentLeft: /*#__PURE__*/React.createElement(StyledIcon, {
          icon: icon,
          size: size,
          color: color
        }),
        content: /*#__PURE__*/React.createElement(TextBox, {
          title: icon
        })
      });
    }));
  }));
};