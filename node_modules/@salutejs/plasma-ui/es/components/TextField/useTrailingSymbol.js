function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { useEffect, useRef, useState } from 'react';
import { useDebouncedFunction, useResizeObserver } from '@salutejs/plasma-core';

var trimPx = function trimPx(str) {
  return str.replace('px', '');
};

var getInputOffset = function getInputOffset(inputRef) {
  if (!inputRef || !inputRef.current) {
    return [0, 0];
  }

  var _getComputedStyle = getComputedStyle(inputRef === null || inputRef === void 0 ? void 0 : inputRef.current),
      paddingLeft = _getComputedStyle.paddingLeft,
      paddingRight = _getComputedStyle.paddingRight;

  var left = parseInt(trimPx(paddingLeft), 10);
  var right = parseInt(trimPx(paddingRight), 10);
  return [left, right];
};

export var useTrailingSymbol = function useTrailingSymbol(_ref) {
  var size = _ref.size,
      contentLeft = _ref.contentLeft,
      contentRight = _ref.contentRight,
      _ref$rightTrailingSym = _ref.rightTrailingSymbols,
      rightTrailingSymbols = _ref$rightTrailingSym === void 0 ? '' : _ref$rightTrailingSym,
      value = _ref.value,
      _ref$rightTrailingSym2 = _ref.rightTrailingSymbolsWidth,
      rightTrailingSymbolsWidth = _ref$rightTrailingSym2 === void 0 ? 0 : _ref$rightTrailingSym2,
      deviceScale = _ref.deviceScale;
  var hiddenDivRef = useRef(null);
  var inputRef = useRef(null);

  var _useState = useState([0, 0]),
      _useState2 = _slicedToArray(_useState, 2),
      inputOffset = _useState2[0],
      setInputOffset = _useState2[1];

  var _useState3 = useState(0),
      _useState4 = _slicedToArray(_useState3, 2),
      rightTrailingSymbolsPosition = _useState4[0],
      setRightTrailingSymbolsPosition = _useState4[1];

  var _useState5 = useState(0),
      _useState6 = _slicedToArray(_useState5, 2),
      inputWidth = _useState6[0],
      setInputWidth = _useState6[1];

  var currentTrailingSymbolsWidth = rightTrailingSymbols.length === 1 ? 0 : rightTrailingSymbolsWidth;
  var debouncedResize = useDebouncedFunction(function (width) {
    return setInputWidth(width);
  }, 100);
  useResizeObserver(inputRef, function (currentElement) {
    var _currentElement$getBo = currentElement.getBoundingClientRect(),
        width = _currentElement$getBo.width;

    debouncedResize(width);
  });
  useEffect(function () {
    if (!rightTrailingSymbols) {
      return;
    }

    setInputOffset(getInputOffset(inputRef));
  }, [size, Boolean(contentLeft), Boolean(contentRight), rightTrailingSymbols, currentTrailingSymbolsWidth, deviceScale]);
  useEffect(function () {
    var _hiddenDivRef$current;

    if (!rightTrailingSymbols) {
      return;
    }

    var _inputOffset = _slicedToArray(inputOffset, 2),
        inputOffsetLeft = _inputOffset[0],
        inputOffsetRight = _inputOffset[1];

    var inputWidthBase = inputWidth - inputOffsetLeft - inputOffsetRight;
    var hiddenDivWidth = (hiddenDivRef === null || hiddenDivRef === void 0 ? void 0 : (_hiddenDivRef$current = hiddenDivRef.current) === null || _hiddenDivRef$current === void 0 ? void 0 : _hiddenDivRef$current.clientWidth) || 0;
    var position = hiddenDivWidth > inputWidthBase ? inputWidth - inputOffsetRight : hiddenDivWidth + inputOffsetLeft;
    setRightTrailingSymbolsPosition(position);
  }, [value, inputOffset, rightTrailingSymbols, size, Boolean(contentLeft), Boolean(contentRight), deviceScale, inputWidth]);
  return {
    inputRef: inputRef,
    hiddenDivRef: hiddenDivRef,
    rightTrailingSymbolsPosition: rightTrailingSymbolsPosition
  };
};