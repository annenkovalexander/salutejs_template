var _NoScroll;

var _excluded = ["title", "subtitle", "visible", "approveText", "dismissText", "view", "reverseButtons", "onApprove", "onDismiss"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useCallback, useRef } from 'react';
import styled, { css, createGlobalStyle } from 'styled-components';
import { overlay, backgroundPrimary } from '@salutejs/plasma-tokens';
import { ButtonRoot } from '@salutejs/plasma-core';
import { mediaQuery } from '../../utils';
import { Button } from '../Button';
import { TextBox } from '../TextBox';
import { Cell } from '../Cell';
import { useAutoFocus } from './Confirm.hooks';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Confirm/Confirm');
// TODO: https://github.com/salute-developers/plasma/issues/232
var Wrapper = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-ui__sc-qi6do9-0"
})(["position:fixed;top:0;bottom:0;left:0;right:0;opacity:1;transition:", ";z-index:1000;", ""], function (_ref) {
  var theme = _ref.theme;
  return theme.lowPerformance ? 'unset' : 'all 0.5s 0.1s';
}, function (_ref2) {
  var visible = _ref2.visible;
  return !visible && css(["opacity:0;visibility:hidden;"]);
});
var Overlay = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-ui__sc-qi6do9-1"
})(["position:absolute;top:0;left:0;width:100%;height:100%;background-color:", ";"], overlay);
var NoScroll = /*#__PURE__*/createGlobalStyle(["body{overflow:hidden;}"]);
var tvLayout = /*#__PURE__*/css(["display:flex;flex-direction:row;justify-content:space-between;align-items:center;"]);
var StyledButton = /*#__PURE__*/styled(Button).withConfig({
  componentId: "plasma-ui__sc-qi6do9-2"
})([""]); // TODO: https://github.com/salute-developers/plasma/issues/232

var ConfirmRoot = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-ui__sc-qi6do9-3"
})(["position:absolute;left:0;right:0;margin:1rem;padding:0.75rem;border-radius:1.25rem;background-color:", ";", " transition:", ";", ";"], backgroundPrimary, function (_ref3) {
  var theme = _ref3.theme;
  return css(["", " ", " ", ""], mediaQuery('M', theme.deviceScale)(tvLayout), mediaQuery('L', theme.deviceScale)(tvLayout), mediaQuery('XL', theme.deviceScale)(tvLayout));
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.lowPerformance ? 'unset' : 'transform 0.5s';
}, function (_ref5) {
  var visible = _ref5.visible;
  return !visible && {
    transform: 'translateY(-100%)'
  };
});
var BtnWrap = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-ui__sc-qi6do9-4"
})(["flex:1;display:flex;", ":not(:last-child){", "}", ";", "{min-width:0;}"], StyledButton, function (_ref6) {
  var reverse = _ref6.reverse;
  return reverse ? {
    marginLeft: '0.75rem'
  } : {
    marginRight: '0.75rem'
  };
}, function (_ref7) {
  var reverse = _ref7.reverse;
  return reverse && {
    flexDirection: 'row-reverse'
  };
}, ButtonRoot); // TODO: https://github.com/salute-developers/plasma/issues/232

var StyledCell = /*#__PURE__*/styled(Cell).withConfig({
  componentId: "plasma-ui__sc-qi6do9-5"
})(["flex:1;", " & > div{padding:0;}"], function (_ref8) {
  var theme = _ref8.theme;
  return mediaQuery('S', theme.deviceScale)(css(["margin-bottom:0.75rem;"]));
});
/**
 * Сообщение подтверждения действия пользователя.
 */

export var Confirm = function Confirm(props) {
  var title = props.title,
      subtitle = props.subtitle,
      visible = props.visible,
      approveText = props.approveText,
      dismissText = props.dismissText,
      _props$view = props.view,
      view = _props$view === void 0 ? 'secondary' : _props$view,
      _props$reverseButtons = props.reverseButtons,
      reverseButtons = _props$reverseButtons === void 0 ? false : _props$reverseButtons,
      onApprove = props.onApprove,
      onDismiss = props.onDismiss,
      rest = _objectWithoutProperties(props, _excluded);

  var onApproveClick = useCallback(function () {
    onApprove();
  }, [onApprove]);
  var onDismissClick = useCallback(function () {
    onDismiss && onDismiss();
  }, [onDismiss]);
  var btnRef = useRef(null);
  useAutoFocus(btnRef, {
    trigger: visible
  });
  var approve = /*#__PURE__*/React.createElement(StyledButton, {
    size: "s",
    ref: btnRef,
    tabIndex: 0,
    stretch: true,
    view: view,
    text: approveText,
    onClick: onApproveClick
  });
  var dismiss = dismissText ? /*#__PURE__*/React.createElement(StyledButton, {
    size: "s",
    stretch: true,
    view: "secondary",
    text: dismissText,
    onClick: onDismissClick
  }) : null;
  var buttons = /*#__PURE__*/React.createElement(BtnWrap, {
    reverse: reverseButtons
  }, dismiss, approve);
  return /*#__PURE__*/React.createElement(Wrapper, _extends({
    visible: visible
  }, rest), /*#__PURE__*/React.createElement(Overlay, {
    onClick: onDismissClick
  }), visible && (_NoScroll || (_NoScroll = /*#__PURE__*/React.createElement(NoScroll, null))), /*#__PURE__*/React.createElement(ConfirmRoot, {
    visible: visible
  }, /*#__PURE__*/React.createElement(StyledCell, {
    content: /*#__PURE__*/React.createElement(TextBox, {
      title: title,
      subTitle: subtitle
    })
  }), buttons));
};