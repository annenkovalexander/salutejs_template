"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.detectDevice = exports.isTV = exports.isSberBoxTop = exports.isSberBox = exports.isSberPortal = exports.DeviceKindList = exports.deviceScales = void 0;
var deviceScales = {
  sberPortal: 2,
  sberBox: 2,
  mobile: 1
};
exports.deviceScales = deviceScales;
var DeviceKindList;
/**
 * Проверка в браузере на устройство "SberPortal".
 * @return {boolean}
 */

exports.DeviceKindList = DeviceKindList;

(function (DeviceKindList) {
  DeviceKindList["sberBox"] = "sberBox";
  DeviceKindList["mobile"] = "mobile";
  DeviceKindList["sberPortal"] = "sberPortal";
})(DeviceKindList || (exports.DeviceKindList = DeviceKindList = {}));

var isSberPortal = function isSberPortal() {
  if (typeof navigator === 'undefined') {
    return false;
  }

  var ua = navigator.userAgent.toLowerCase();
  return ua.includes('sberportal') || ua.includes('stargate');
};
/**
 * Проверка в браузере на устройство "SberBox".
 * @return {boolean}
 */


exports.isSberPortal = isSberPortal;

var isSberBox = function isSberBox() {
  if (typeof navigator === 'undefined') {
    return false;
  }

  var ua = navigator.userAgent.toLowerCase();
  return ua.includes('sberbox');
};
/**
 * Проверка в браузере на устройство "SberBoxTop".
 * @return {boolean}
 */


exports.isSberBox = isSberBox;

var isSberBoxTop = function isSberBoxTop() {
  if (typeof navigator === 'undefined') {
    return false;
  }

  var ua = navigator.userAgent.toLowerCase();
  return ua.includes('satellite') || ua.includes('sberbox top');
};
/**
 * Проверка в браузере на устройство "SberBoxTV".
 * @return {boolean}
 */


exports.isSberBoxTop = isSberBoxTop;

var isTV = function isTV() {
  if (typeof navigator === 'undefined') {
    return false;
  }

  var ua = navigator.userAgent.toLowerCase();
  return ua.includes('(tv; tv)') || ua.includes('(tv; huawei)') || ua.includes('(huawei-tv; huawei)') || ua.includes('(huawei-tv; huawei tv)');
};
/**
 * Вернет тип устройства, под которым запустилось приложение.
 * В случае запуска в серверном окружении, возвращает "sberBox".
 * @return {DeviceKind}
 */


exports.isTV = isTV;

var detectDevice = function detectDevice() {
  if (typeof navigator === 'undefined') {
    return DeviceKindList.sberBox;
  }

  switch (true) {
    case isSberPortal():
      return DeviceKindList.sberPortal;

    case isSberBoxTop():
    case isSberBox():
    case isTV():
      return DeviceKindList.sberBox;

    default:
      return DeviceKindList.mobile;
  }
};

exports.detectDevice = detectDevice;